// Create a program that prints a set of elements. On the first line, you will receive two numbers - n and m, which represent the lengths of two separate sets. 
// On the next n + m lines, you will receive n numbers, which are the numbers in the first set, and m numbers, which are in the second set. Find all the unique
// elements that appear in both of them and print them in the order in which they appear in the first set - n.
// For example:
// Set with length n = 4: { 1, 3, 5, 7}
// Set with length m = 3: { 3, 4, 5}
// Set that contains all the elements that repeat in both sets -> {3, 5}

//     Input
// 4 3
// 1
// 3
// 5
// 7
// 3
// 4
// 5


namespace SetsOfElements
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[] counter = Console.ReadLine().Split().Select(int.Parse).ToArray();
            int firstHashSetCount = counter[0];
            int secondHashSetCount = counter[1];
            HashSet<int> firstHashSet = new HashSet<int>();  
            HashSet<int> secondHashSet = new HashSet<int>();
            for (int i = 0; i < firstHashSetCount; i++)
            {
                firstHashSet.Add(int.Parse(Console.ReadLine()));
            }
            for (int i = 0; i < secondHashSetCount; i++)
            {
                secondHashSet.Add(int.Parse(Console.ReadLine()));
            }
            
            foreach (int firstNumber in firstHashSet)
            {
                foreach (int secondNumber in secondHashSet)
                {
                    if (firstNumber == secondNumber)
                    {
                        Console.Write(firstNumber + " ");
                    }
                }
            }
        }
    }
}
