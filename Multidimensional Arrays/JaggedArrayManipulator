// Create a program that populates, analyzes and manipulates the elements of a matrix with an unequal length of its rows.
// First, you will receive an integer N equal to the number of rows in your matrix.
// On the next N lines, you will receive sequences of integers, separated by a single space. Each sequence is a row in the matrix.
// After populating the matrix, start analyzing it. If a row and the one below it have equal length, multiply each element in both of them by 2,
// otherwise - divide by 2.
// Then, you will receive commands. There are three possible commands:
// •	"Add {row} {column} {value}" - add { value}
// to the element at the given indexes, if they are valid.
// •	"Subtract {row} {column} {value}" - subtract {value} from the element at the given indexes, if they are valid.
// •	"End" - print the final state of the matrix (all elements separated by a single space) and stop the program.
// Input
// •	On the first line, you will receive the number of rows of the matrix - integer N.
// •	On the next N lines, you will receive each row – sequence of integers, separated by a single space
// •	{value} will always be an integer number.
// •	Then you will be receiving commands until reading "End".
// Output
// •	The output should be printed on the console and it should consist of N lines.
// •	Each line should contain a string representing the respective row of the final matrix, elements separated by a single space.
// Constraints
// •	The number of rows N of the matrix will be an integer in the range [2…12].
// •	The input will always follow the format above.
// •	Think about data types.

//     Input: 
// 5
// 10 20 30
// 1 2 3
// 2
// 2
// 10 10
// End
//     Output:
// 20 40 60
// 1 2 3
// 2
// 2
// 5 5 


namespace JaggedArrayManipulator
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int rows = int.Parse(Console.ReadLine());
            int[][] jaggedArray = new int[rows][];
            for (int row = 0; row < jaggedArray.GetLength(0); row ++ )
            {
                jaggedArray[row] = Console.ReadLine()
                    .Split(" ",StringSplitOptions.RemoveEmptyEntries)
                    .Select(int.Parse)
                    .ToArray();
            }
            for (int row = 0;row < jaggedArray.GetLength(0) - 1;row ++ )
            {
                if (jaggedArray[row].Length == jaggedArray[row + 1].Length)
                {
                    for (int col = 0; col < jaggedArray[row].Length; col++)
                    {
                        jaggedArray[row][col] *= 2;
                        jaggedArray[row + 1][col] *= 2;
                    }
                }
                else
                {
                    for (int col = 0; col < jaggedArray[row].Length; col++)
                    {
                        jaggedArray[row][col] /= 2;
                    }
                    for (int col = 0; col < jaggedArray[row+1].Length; col++)
                    {
                        jaggedArray[row + 1][col] /= 2;
                    }
                }
            }
            string input = Console.ReadLine();
            while (input != "End")
            {
                string[] instruction = input
                    .Split(" ", StringSplitOptions.RemoveEmptyEntries)
                    .ToArray();
                string command = instruction[0];
                int row = int.Parse(instruction[1]);
                int col = int.Parse(instruction[2]);
                int value = int.Parse(instruction[3]);
                if (IsValidIndex(row, col, jaggedArray))
                {
                    if (command == "Add")
                    {
                        jaggedArray[row][col] += value;
                    }
                    else // == Substract
                    {
                        jaggedArray[row][col] -= value;
                    }
                }
                input = Console.ReadLine();
            }
            for(int row = 0; row < jaggedArray.GetLength(0); row++)
            {
                for (int col = 0;col < jaggedArray[row].Length; col++)
                {
                    Console.Write(jaggedArray[row][col] + " ");
                }
                Console.WriteLine();
            }
        }
        static bool IsValidIndex (int row , int col , int[][] jaggedArray)
        {
            return row >= 0 && col >= 0 && row < jaggedArray.GetLength(0) && col < jaggedArray[row].Length;
        }
    }
}
