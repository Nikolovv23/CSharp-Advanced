// Create a program that reads a matrix from the console. Then find the biggest sum of the 2x2 submatrix and print it to the console.
// On the first line, you will get matrix sizes in format rows, columns.
// On the next rows lines, you will get elements for each column, separated with a comma and a space.
// Print the biggest top-left square, which you find, and the sum of its elements.

// Input:                  Output:
// 3, 6                    9 8
// 7, 1, 3, 3, 2, 1        7 9
// 1, 3, 9, 8, 5, 6        33
// 4, 6, 7, 9, 1, 0	      


namespace SquareWithMaximumSum
{
    internal class Program
    {
        static void Main(string[] args)
        {
             int[] input = Console.ReadLine().Split(", ").Select(int.Parse).ToArray();   
             int rows = input[0];
             int cols = input[1];
             int[,] matrix = ReadMatrix(rows, cols, ", ");
             int sum = 0;
             Dictionary<int, string> listOfSums = new();
             for (int row = 0; row < rows; row++)
             {
                for (int col = 0; col < cols; col++)
                {
                    if (row == rows-1)
                    {
                        break;
                    }
                    if (col == cols-1)
                    {
                        break;
                    }
                    sum = matrix[row, col] + matrix[row+1, col+1] + matrix[row, col+1] + matrix[row+1, col];
                    string coordinates = $"{matrix[row, col]} {matrix[row, col + 1]}\n" +
                                         $"{matrix[row+1, col]} {matrix[row + 1, col + 1]}";
                    if (!listOfSums.ContainsKey(sum)) 
                    {
                        listOfSums.Add(sum, coordinates);
                    }
                }
             }
            int maxKey = listOfSums.Keys.Max();
            foreach (var kvp in listOfSums)
            {
                if (kvp.Key == maxKey)
                {
                    Console.WriteLine(kvp.Value);
                    Console.WriteLine(kvp.Key);
                }
            }
            static int [,] ReadMatrix(int rows, int cols,string separator)
            {
                int[,] matrix = new int[rows, cols];
                for (int row = 0; row < matrix.GetLength(0); row++)
                {
                    int[] rowArray = Console.ReadLine().Split(separator).Select(int.Parse).ToArray();
                    for (int col = 0; col < matrix.GetLength(1); col++)
                    {
                        matrix[row, col] = rowArray[col];
                    }
                }
                return matrix;
            }
        }
    }
}
