// Play around with a queue. You will be given an integer N representing the number of elements to enqueue (add), an integer S,
// representing the number of elements to dequeue (remove) from the queue, and finally an integer X, an element that you should look for in the queue.
// If it is, print true on the console. If it's not printed the smallest element is currently present in the queue. If there are no elements in the sequence,
// print 0 on the console.
// Input:               Output:
// 5 2 32               True
// 1 13 45 32 4

namespace BasicQueueOperations
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[] input = Console.ReadLine().Split(" ").Select(int.Parse).ToArray();
            int numbersToPush = input[0];
            int numbersToPop = input[1];
            int existingNumber = input[2];

            List<int> numbers = Console.ReadLine().Split().Select(int.Parse).ToList();
            Queue<int> queue = new Queue<int>();
            bool isItExist = true;

            for (int i = 0; i < numbersToPush; i++)
            {
                queue.Enqueue(numbers[i]);
            }
            for (int i = 0; i < numbersToPop; i++)
            {
                queue.Dequeue();
            }

            foreach (int i in queue)
            {
                if (i == existingNumber)
                {
                    Console.WriteLine("true");
                    isItExist = true;
                    break;
                }
                else
                {
                    isItExist = false;
                }
            }
            if(queue.Count == 0)
            {
                Console.WriteLine("0");
            }
            if (!isItExist)
            {
                Console.WriteLine(queue.Min());
            }
        }
    }
}
