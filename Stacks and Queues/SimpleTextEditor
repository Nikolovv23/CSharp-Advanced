// You are given an empty text. Your task is to implement 4 commands related to manipulating the text
// •	1 someString - appends someString to the end of the text.
// •	2 count - erases the last count elements from the text.
// •	3 index - returns the element at position index from the text.
// •	4 - undoes the last not undone command of type 1 or 2 and returns the text to the state before that operation.
// Input
// •	The first line contains n – the number of operations.
// •	Each of the following n lines contains the name of the operation, followed by the command argument, if any, separated by space in the following format "CommandName Argument".
// Output
// •	For each operation of type 3 print a single line with the returned character of that operation.

// Input:        Output:
// 8             c
// 1 abc         y
// 3 3           a
// 2 3
// 1 xy
// 3 2
// 4
// 4 
// 3 1


namespace SimpleTextEditor
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int n = int.Parse(Console.ReadLine());

            var builder = new StringBuilder();
            var stack = new Stack<string>();
            stack.Push(builder.ToString());

            for (int i = 0; i < n; i++)
            {
                string[] input = Console.ReadLine().Split();
                int command = int.Parse(input[0]);

                switch (command)
                {
                    case 1:
                        builder.Append(input[1]);
                        stack.Push(builder.ToString());
                        break;
                    case 2:
                        int number = int.Parse(input[1]);
                        builder.Remove(builder.Length - number, number);
                        stack.Push(builder.ToString());
                        break;
                    case 3:
                        int index = int.Parse(input[1]);
                        Console.WriteLine(builder[index - 1]);
                        break;
                    case 4:
                        stack.Pop();
                        builder = new StringBuilder();
                        builder.Append(stack.Peek());
                        break;
                }
            }
        }
    }
}
